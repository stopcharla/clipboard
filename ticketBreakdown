Using REST API for the feature.



Idea: I would like to store the custom mapping in a new table i.e. specific to facility, the table will be named as <FacilityId>_AgentMapping which segregates data and allows easy updates efficiently. 
The table can be created at two stages
1: Create table when a new facility is created
2: Create table when we receive first request to add custom id for agent.
There can be race conditions if the table is created when a new custom id is added. Hence the proposed to create a new table when a new facility is added.  This is again debatable depending on the amount of requests from the facility. Taking this route Assuming we do have a chance of having race conditions.
The table has agentId as primary key and the custom id as unique field to avoid any duplicate custom ids



Ticket 1:
Create a new table <FacilityId>_AgentMapping for Facility

Description:

All facilities that are newly created should have a new <FacilityId>_AgentMapping table created. 
Best handled on events from db streams, i.e. when a new row is added to Facility table a new table is created


Acceptance Criteria:
On adding a new facility, we should create a new <FacilityId>_AgentMapping table.
Unit tests all the necessary functions

Time estimate:
1-3hrs


Ticket 2:

Create and run Script to add <FacilityId>_AgentMapping table for all existing facilities 

Description:
As a part of new custom id feature addition we would like to have a new table for all our existing facilities.
Hence create a script to obtain all facility ids and then create a new table for each facility.


Acceptance Criteria:
Once the script is ran, all facilites should have the new table.


Time estimate:
1-2 days.



Ticket 3:
Create a new POST API to add custom mapping for facility to user
Description: 
A new post api to allow facilites to add custom id for the agents. The data will be stored in the database with table name <FacilityId>_AgentMapping. 

Acceptance Criteria:
The custom id is added/replaced to the db table <FacilityId>_AgentMapping
No multiple agents should have same custom id.
Return 200 on successful update.
Return 400 on failure


Time needed:
1-3 hrs



Ticket 4: 

Create a GET endpoint to obtain custom agent mappings for facility.

Description:
Create a GET API to accept 1 compulsory parameter facilityId and other optional parameter agentId and optional pagination info.
The api returns the required custom ids for all agents or only specific agent depending on the agentID.

Acceptance Criteria:
Return all paginated custom ids when only facility id is provided.
{

 pageNumber:1

 body:{

  agentId: cutsomId

 	 ..

  }

}

Each page contains a max of 20 agent ids

Return empty object or single agentId if agentId is provided.
{

 body:{

  agentId: cutsomId

  }

}


{

 body:{}

}

Unit tests/Integration tests to be added as necessary.



Time estimate:

2-4 hrs




Ticket 5:

Update getShiftsByFacility to update agents with their custom id.

Description:

Update getShiftsByFacility to embed the custom id to each shift.
Fetch all custom ids of a faciltiy and store them in memory or to redis(if applicable)
Then once all shifts are fetched update all the entries with their custom id if applicable
The response should contains a new custom Id field.
Reuse the code of GET API within backend to obtain custom ids.

Acceptance Criteria:
The getShiftsByFacility response should contain a new customID field.
If a facilty added custom id to agent then the data need to be in the response.
Unit tests to be added as necessary.

Time Estimate:
2-4hrs

Assumption is generateReports function/API is not dependent on the fields of getShiftsByFacility response.

